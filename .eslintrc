{
  "extends": ["eslint:recommended", "plugin:react/recommended"],
  "parser": "babel-eslint",
  "plugins": [
    "react"
  ],
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true,
      "modules": true
    }
  },
  "env": {
    "browser": true,
    "amd": true,
    "es6": true,
    "node": true,
    "jest": true // Jest global variables.
  },
  "ecmaFeatures": {
		"arrowFunctions": true, // enable arrow functions
		"binaryLiterals": true, // enable binary literals
		"blockBindings": true, // enable let and const (aka block bindings)
		"classes": true, // enable classes
		"defaultParams": true, // enable default function parameters
		"destructuring": true, // enable destructuring
		"forOf": true, // enable for-of loops
		"generators": true, // enable generators
		"modules": true, // enable modules and global strict mode
		"objectLiteralComputedProperties": true, // enable computed object literal property names
		"objectLiteralDuplicateProperties": true, // enable duplicate object literal properties in strict mode
		"objectLiteralShorthandMethods": true, // enable object literal shorthand methods
		"objectLiteralShorthandProperties": true, // enable object literal shorthand properties
		"octalLiterals": true, // enable octal literals
		"regexUFlag": true, // enable the regular expression u flag
		"regexYFlag": true, // enable the regular expression y flag
		"restParams": true, // enable the rest parameters
		"spread": true, // enable the spread operator for arrays
		"superInFunctions": true, // enable super references inside of functions
		"templateStrings": true, // enable template strings
		"unicodeCodePointEscapes": true, // enable code point escapes
		"globalReturn": true, // allow return statements in the global scope
		"jsx": true, // enable JSX
		"experimentalObjectRestSpread": true // enable support for the experimental object rest/spread properties (IMPORTANT: This is an experimental feature
	},
  "rules": {
		// Possible Errors
		// The following rules point out areas where you might have made mistakes.

		"comma-dangle": [2, "always-multiline"], // disallow or enforce trailing commas (recommended)
		"no-cond-assign": [2, "except-parens"], // disallow assignment in conditional expressions (recommended)
		"no-console": 2, // disallow use of console in the node environment (recommended)
		// "no-constant-condition": 0, // disallow use of constant expressions in conditions (recommended)
		// "no-control-regex": 0, // disallow control characters in regular expressions (recommended)
		"no-debugger": 2, // disallow use of debugger (recommended)
		"no-dupe-args": 2, // disallow duplicate arguments in functions (recommended)
		"no-dupe-keys": 2, // disallow duplicate keys when creating object literals (recommended)
		"no-duplicate-case": 2, // disallow a duplicate case label. (recommended)
		// "no-empty-character-class": 0, // disallow the use of empty character classes in regular expressions (recommended)
		// "no-empty": 0, // disallow empty statements (recommended)
		// "no-ex-assign": 0, // disallow assigning to the exception in a catch block (recommended)
		// "no-extra-boolean-cast": 0, // disallow double-negation boolean casts in a boolean context (recommended)
		// "no-extra-parens": 0, // disallow unnecessary parentheses
		// "no-extra-semi": 0, // disallow unnecessary semicolons (recommended) (fixable)
		// "no-func-assign": 0, // disallow overwriting functions written as function declarations (recommended)
		// "no-inner-declarations": 0, // disallow function or variable declarations in nested blocks (recommended)
		// "no-invalid-regexp": 0, // disallow invalid regular expression strings in the RegExp constructor (recommended)
		// "no-irregular-whitespace": 0, // disallow irregular whitespace outside of strings and comments (recommended)
		// "no-negated-in-lhs": 0, // disallow negation of the left operand of an in expression (recommended)
		// "no-obj-calls": 0, // disallow the use of object properties of the global object (Math and JSON) as functions (recommended)
		// "no-regex-spaces": 0, // disallow multiple spaces in a regular expression literal (recommended)
		// "no-sparse-arrays": 0, // disallow sparse arrays (recommended)
		// "no-unexpected-multiline": 0, // Avoid code that looks like two expressions but is actually one
		"no-unreachable": 2, // disallow unreachable statements after a return, throw, continue, or break statement (recommended)
		// "use-isnan": 0, // disallow comparisons with the value NaN (recommended)
		// "valid-jsdoc": 0, // Ensure JSDoc comments are valid
		"valid-typeof": 2, // Ensure that the results of typeof are compared against a valid string (recommended)



		// Best Practices
		// These are rules designed to prevent you from making mistakes. They either prescribe a better way of doing something or help you avoid footguns.

		// "accessor-pairs": 0, // Enforces getter/setter pairs in objects
		// "block-scoped-var": 0, // treat var statements as if they were block scoped
		// "complexity": 0, // specify the maximum cyclomatic complexity allowed in a program
		// "consistent-return": 0, // require return statements to either always or never specify values
		// "curly": 0, // specify curly brace conventions for all control statements
		// "default-case": 0, // require default case in switch statements
		"dot-location": [2, "property"], // enforces consistent newlines before or after dots
		// "dot-notation": 0, // encourages use of dot notation whenever possible
		"eqeqeq": [2, "allow-null"], // require the use of === and !== (fixable)
		// "guard-for-in": 0, // make sure for-in loops have an if statement
		// "no-alert": 0, // disallow the use of alert, confirm, and prompt
		// "no-caller": 0, // disallow use of arguments.caller or arguments.callee
		// "no-case-declarations": 0, // disallow lexical declarations in case clauses
		// "no-div-regex": 0, // disallow division operators explicitly at beginning of regular expression
		"no-else-return": 2, // disallow else after a return in an if
		// "no-empty-label": 0, // disallow use of labels for anything other than loops and switches
		// "no-empty-pattern": 0, // disallow use of empty destructuring patterns
		// "no-eq-null": 0, // disallow comparisons to null without a type-checking operator
		// "no-eval": 0, // disallow use of eval()
		// "no-extend-native": 0, // disallow adding to native types
		// "no-extra-bind": 0, // disallow unnecessary function binding
		// "no-fallthrough": 0, // disallow fallthrough of case statements (recommended)
		// "no-floating-decimal": 0, // disallow the use of leading or trailing decimal points in numeric literals
		// "no-implicit-coercion": 0, // disallow the type conversions with shorter notations
		// "no-implied-eval": 0, // disallow use of eval()-like methods
		// "no-invalid-this": 0, // disallow this keywords outside of classes or class-like objects
		// "no-iterator": 0, // disallow usage of __iterator__ property
		// "no-labels": 0, // disallow use of labeled statements
		// "no-lone-blocks": 0, // disallow unnecessary nested blocks
		// "no-loop-func": 0, // disallow creation of functions within loops
		// "no-magic-numbers": 0, // disallow the use of magic numbers
		// "no-multi-spaces": 0, // disallow use of multiple spaces (fixable)
		// "no-multi-str": 0, // disallow use of multiline strings
		// "no-native-reassign": 0, // disallow reassignments of native objects
		// "no-new-func": 0, // disallow use of new operator for Function object
		// "no-new-wrappers": 0, // disallows creating new instances of String,Number, and Boolean
		// "no-new": 0, // disallow use of the new operator when not part of an assignment or comparison
		// "no-octal-escape": 0, // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
		// "no-octal": 0, // disallow use of octal literals (recommended)
		"no-param-reassign": 2, // disallow reassignment of function parameters
		// "no-process-env": 0, // disallow use of process.env
		// "no-proto": 0, // disallow usage of __proto__ property
		// "no-redeclare": 0, // disallow declaring the same variable more than once (recommended)
		// "no-return-assign": 0, // disallow use of assignment in return statement
		// "no-script-url": 0, // disallow use of javascript: urls.
		// "no-self-compare": 0, // disallow comparisons where both sides are exactly the same
		// "no-sequences": 0, // disallow use of the comma operator
		// "no-throw-literal": 0, // restrict what can be thrown as an exception
		// "no-unused-expressions": 0, // disallow usage of expressions in statement position
		// "no-useless-call": 0, // disallow unnecessary .call() and .apply()
		// "no-useless-concat": 0, // disallow unnecessary concatenation of literals or template literals
		// "no-void": 0, // disallow use of the void operator
		// "no-warning-comments": 0, // disallow usage of configurable warning terms in comments. e.g. TODO or FIXME
		// "no-with": 0, // disallow use of the with statement
		"radix": 2, // require use of the second argument for parseInt()
		// "vars-on-top": 0, // require declaration of all vars at the top of their containing scope
		// "wrap-iife": 0, // require immediate function invocation to be wrapped in parentheses
		// "yoda": 0, // require or disallow Yoda conditions



		// Strict Mode
		// These rules relate to using strict mode.

		"strict": [2,"global"], // controls location of Use Strict Directives



		// Variables
		// These rules have to do with variable declarations.

		// "init-declarations": 0, // enforce or disallow variable initializations at definition
		// "no-catch-shadow": 0, // disallow the catch clause parameter name being the same as a variable in the outer scope
		// "no-delete-var": 0, // disallow deletion of variables (recommended)
		// "no-label-var": 0, // disallow labels that share a name with a variable
		// "no-shadow-restricted-names": 0, // disallow shadowing of names such as arguments
		// "no-shadow": 0, // disallow declaration of variables already declared in the outer scope
		// "no-undef-init": 0, // disallow use of undefined when initializing variables
		"no-undef": 2, // disallow use of undeclared variables unless mentioned in a /*global */ block (recommended)
		"no-undefined": 0, // disallow use of undefined variable
		"no-unused-vars": 1, // disallow declaration of variables that are not used in the code (recommended)
		"no-use-before-define": [2, "nofunc"], // disallow use of variables before they are defined



		// Node.js and CommonJS
		// These rules are specific to JavaScript running on Node.js or using CommonJS in the browser.

		// "callback-return": 0, // enforce return after a callback
		// "global-require": 0, // enforce require() on top-level module scope
		// "handle-callback-err": 0, // enforce error handling in callbacks
		// "no-mixed-requires": 0, // disallow mixing regular variable and require declarations
		// "no-new-require": 0, // disallow use of new operator with the require function
		// "no-path-concat": 0, // disallow string concatenation with __dirname and __filename
		// "no-process-exit": 0, // disallow process.exit()
		// "no-restricted-modules": 0, // restrict usage of specified node modules
		// "no-sync": 0, // disallow use of synchronous methods



		// Stylistic Issues
		// These rules are purely matters of style and are quite subjective.

		"array-bracket-spacing": [2, "never"], // enforce spacing inside array brackets (fixable)
		"block-spacing": [2, "always"], // disallow or enforce spaces inside of single line blocks (fixable)
		"brace-style": [2, "stroustrup"], // enforce one true brace style
		"camelcase": [2, {"properties": "always"}], // require camel case names
		"comma-spacing": [1, {"before": false, "after": true}], // enforce spacing before and after comma (fixable)
		"comma-style": [2, "last"], // enforce one true comma style
		// "computed-property-spacing": 0, // require or disallow padding inside computed properties (fixable)
		"consistent-this": [1, "_this"], // enforce consistent naming when capturing the current execution context
		// "eol-last": 0, // enforce newline at the end of file, with no multiple empty lines (fixable)
		"func-names": 2, // require function expressions to have a name
		"func-style": [2, "declaration", { "allowArrowFunctions": true }], // enforce use of function declarations or expressions
		// "id-length": 0, // this option enforces minimum and maximum identifier lengths (variable names, property names etc.)
		// "id-match": 0, // require identifiers to match the provided regular expression
		// "indent": 0, // specify tab or space width for your code (fixable)
		"jsx-quotes": [2, "prefer-double"], // specify whether double or single quotes should be used in JSX attributes
		// "key-spacing": 0, // enforce spacing between keys and values in object literal properties
		// "linebreak-style": 0, // disallow mixed 'LF' and 'CRLF' as linebreaks
		// "lines-around-comment": 0, // enforce empty lines around comments
		// "max-depth": 0, // specify the maximum depth that blocks can be nested
		// "max-len": 0, // specify the maximum length of a line in your program
		// "max-nested-callbacks": 0, // specify the maximum depth callbacks can be nested
		// "max-params": 0, // limits the number of parameters that can be used in the function declaration.
		// "max-statements": 0, // specify the maximum number of statement allowed in a function
		// "new-cap": 0, // require a capital letter for constructors
		// "new-parens": 0, // disallow the omission of parentheses when invoking a constructor with no arguments
		// "newline-after-var": 0, // require or disallow an empty newline after variable declarations
		// "no-array-constructor": 0, // disallow use of the Array constructor
		// "no-bitwise": 0, // disallow use of bitwise operators
		// "no-continue": 0, // disallow use of the continue statement
		// "no-inline-comments": 0, // disallow comments inline after code
		// "no-lonely-if": 0, // disallow if as the only statement in an else block
		// "no-mixed-spaces-and-tabs": 0, // disallow mixed spaces and tabs for indentation (recommended)
		// "no-multiple-empty-lines": 0, // disallow multiple empty lines
		// "no-negated-condition": 0, // disallow negated conditions
		// "no-nested-ternary": 0, // disallow nested ternary expressions
		// "no-new-object": 0, // disallow the use of the Object constructor
		// "no-plusplus": 0, // disallow use of unary operators, ++ and --
		// "no-restricted-syntax": 0, // disallow use of certain syntax in code
		// "no-spaced-func": 0, // disallow space between function identifier and application (fixable)
		// "no-ternary": 0, // disallow the use of ternary operators
		// "no-trailing-spaces": 0, // disallow trailing whitespace at the end of lines (fixable)
		// "no-underscore-dangle": 0, // disallow dangling underscores in identifiers
		// "no-unneeded-ternary": 0, // disallow the use of ternary operators when a simpler alternative exists
		// "object-curly-spacing": 0, // require or disallow padding inside curly braces (fixable)
		// "one-var": 0, // require or disallow one variable declaration per function
		// "operator-assignment": 0, // require assignment operator shorthand where possible or prohibit it entirely
		// "operator-linebreak": 0, // enforce operators to be placed before or after line breaks
		"padded-blocks": [2, "never"], // enforce padding within blocks
		"quote-props": [2, "as-needed"], // require quotes around object literal property names
		"quotes": [2, "single"], // specify whether backticks, double or single quotes should be used (fixable)
		// "require-jsdoc": 0, // Require JSDoc comment
		// "semi-spacing": 0, // enforce spacing before and after semicolons
		// "semi": 0, // require or disallow use of semicolons instead of ASI (fixable)
		// "sort-vars": 0, // sort variables within the same declaration block
		"keyword-spacing": [2, { "before": true, "after": true }], // require a space after certain keywords (fixable)
		// "space-before-blocks": 0, // require or disallow a space before blocks (fixable)
		//"space-before-function-paren": [2, "always"], // require or disallow a space before function opening parenthesis (fixable)
		// "space-in-parens": [2, "never", { "exceptions": ["()"] }], // require or disallow spaces inside parentheses
		"space-infix-ops": 2, // require spaces around operators (fixable)
		// "space-return-throw-case": 0, // require a space after return, throw, and case (fixable)
		"space-unary-ops": [2, { "words": true, "nonwords": false }], // require or disallow spaces before/after unary operators (fixable)
		// "spaced-comment": 0, // require or disallow a space immediately following the // or /* in a comment
		// "wrap-regex": 0, // require regex literals to be wrapped in parentheses



		// ECMAScript 6
		// These rules are only relevant to ES6 environments.

		// "arrow-body-style": [2, "always"], // require braces in arrow function body
		"arrow-parens": [2, "always"], // require parens in arrow function arguments
		"arrow-spacing": [2, { "before": true, "after": true }], // require space before/after arrow function's arrow (fixable)
		// "constructor-super": 0, // verify calls of super() in constructors
		// "generator-star-spacing": 0, // enforce spacing around the * in generator functions (fixable)
		// "no-arrow-condition": 0, // disallow arrow functions where a condition is expected
		// "no-class-assign": 0, // disallow modifying variables of class declarations
		"no-const-assign": 2, // disallow modifying variables that are declared using const
		// "no-dupe-class-members": 0, // disallow duplicate name in class members
		// "no-this-before-super": 0, // disallow use of this/super before calling super() in constructors.
		"no-var": 2, // require let or const instead of var
		"object-shorthand": 2, // require method and property shorthand syntax for object literals
		// "prefer-arrow-callback": 0, // suggest using arrow functions as callbacks
		"prefer-const": 2, // suggest using const declaration for variables that are never modified after declared
		// "prefer-reflect": 0, // suggest using Reflect methods where applicable
		// "prefer-spread": 0, // suggest using the spread operator instead of .apply().
		"prefer-template": 1, // suggest using template literals instead of strings concatenation
		// "require-yield": 0, // disallow generator functions that do not have yield


		// ESLint-plugin-React
		// https://github.com/yannickcr/eslint-plugin-react

		"react/display-name": 1, // Prevent missing displayName in a React component definition
		"react/jsx-boolean-value": [1, "always"], // Enforce boolean attributes notation in JSX
		"react/jsx-no-undef": 1, // Disallow undeclared variables in JSX
		// "react/jsx-sort-prop-types": 1, // Enforce propTypes declarations alphabetical sorting
		// "react/jsx-sort-props": 1, // Enforce props alphabetical sorting
		"react/jsx-uses-react": 1, // Prevent React to be incorrectly marked as unused
		"react/jsx-uses-vars": 1, // Prevent variables used in JSX to be incorrectly marked as unused
		"react/no-did-mount-set-state": 1, // Prevent usage of setState in componentDidMount
		"react/no-did-update-set-state": 1, // Prevent usage of setState in componentDidUpdate
		"react/no-multi-comp": 1, // Prevent multiple component definition per file
		"react/no-unknown-property": 1, // Prevent usage of unknown DOM property
		"react/prop-types": 1, // Prevent missing props validation in a React component definition
		// "react/react-in-jsx-scope": 1, // Prevent missing React when using JSX
		// "react/require-extension": 1, // Restrict file extensions that may be required
		// "react/self-closing-comp": 1, // Prevent extra closing tags for components without children
		"react/sort-comp": [1, { // Enforce component methods order
			"order": [
				"lifecycle",
				"render",
				"everything-else"
			],
			"groups": {
				"lifecycle": [
					"displayName",
					"mixins",
					"permissions",
					"cursors",
					"facets",
					"validationSchema",
					"contextTypes",
					"propTypes",
					"childContextTypes",
					"statics",
					"defaultProps",
					"constructor",
					"getDefaultProps",
					"getDefaultState",
					"getInitialState",
					"getChildContext",
					"componentWillMount",
					"componentDidMount",
					"componentWillReceiveProps",
					"shouldComponentUpdate",
					"componentWillUpdate",
					"componentDidUpdate",
					"componentWillUnmount"
				]
			}
		}],
		"react/jsx-wrap-multilines": 1 // Prevent missing parentheses around multilines JSX
	}
}
